# roles/gotify/tasks/main.yml
---
- name: Create gotify namespace
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: gotify

- name: Create PVC for gotify data
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: gotify-data-pvc
        namespace: gotify
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "{{ gotify_storage_size }}"
        storageClassName: rook-ceph-block

- name: Create ConfigMap for gotify configuration
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: gotify-config
        namespace: gotify
      data:
        GOTIFY_DEFAULTUSER_PASS: "{{ gotify_admin_password }}"

- name: Deploy gotify
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: gotify
        namespace: gotify
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: gotify
        template:
          metadata:
            labels:
              app: gotify
          spec:
            containers:
              - name: gotify
                image: gotify/server:latest
                envFrom:
                  - configMapRef:
                      name: gotify-config
                ports:
                  - containerPort: 80
                    name: http
                volumeMounts:
                  - name: data
                    mountPath: /app/data
            volumes:
              - name: data
                persistentVolumeClaim:
                  claimName: gotify-data-pvc

- name: Create gotify service
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: gotify
        namespace: gotify
      spec:
        selector:
          app: gotify
        ports:
          - protocol: TCP
            port: 80
            targetPort: 80

- name: Create gotify ingress
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: gotify-ingress
        namespace: gotify
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: web,websecure
          traefik.ingress.kubernetes.io/router.tls: "true"
          traefik.ingress.kubernetes.io/router.tls.certresolver: letsencrypt
      spec:
        rules:
          - host: "go.{{ nginx_ingress_hostname }}"
            http:
              paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: gotify
                      port:
                        number: 80