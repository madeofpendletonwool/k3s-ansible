apiVersion: v1
kind: Service
metadata:
  name: alertmanager-service
  namespace: {{ log_stack_namespace }}
spec:
  ports:
    - protocol: TCP
      port: {{ alertmanager_port }}
      targetPort: {{ alertmanager_port }}
  selector:
    app.kubernetes.io/instance: {{ log_stack_release_name }}-alertmanager

---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: {{ log_stack_namespace }}
spec:
  ports:
    - protocol: TCP
      port: {{ grafana_port }}
      targetPort: {{ grafana_port }}
  selector:
    app.kubernetes.io/instance: {{ log_stack_release_name }}
    app.kubernetes.io/name: grafana

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: {{ log_stack_namespace }}
spec:
  ports:
    - protocol: TCP
      port: {{ prometheus_port }}
      targetPort: {{ prometheus_port }}
  selector:
    app.kubernetes.io/instance: {{ log_stack_release_name }}-prometheus
    app.kubernetes.io/name: prometheus

---
# First, create the middleware
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: internal-ipwhitelist
  namespace: {{ log_stack_namespace }}
spec:
  ipWhiteList:
    sourceRange:
      - 10.0.0.0/24
      - 10.1.0.0/24
---
# Then modify your Ingress resources to use it
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prometheus-ingress
  namespace: {{ log_stack_namespace }}
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web,websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.tls.certresolver: letsencrypt
    # Add this annotation to use the middleware
    traefik.ingress.kubernetes.io/router.middlewares: {{ log_stack_namespace }}-internal-ipwhitelist@kubernetescrd
spec:
  rules:
    - host: prometheus.{{ nginx_ingress_hostname }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: prometheus-service
                port:
                  number: {{ prometheus_port }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: alertmanager-ingress
  namespace: {{ log_stack_namespace }}
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web,websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.tls.certresolver: letsencrypt
    # Add this annotation to use the middleware
    traefik.ingress.kubernetes.io/router.middlewares: {{ log_stack_namespace }}-internal-ipwhitelist@kubernetescrd
spec:
  rules:
    - host: alertmanager.{{ nginx_ingress_hostname }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: alertmanager-service
                port:
                  number: {{ alertmanager_port }}

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: {{ log_stack_namespace }}
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web,websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.tls.certresolver: letsencrypt
spec:
  rules:
    - host: grafana.{{ nginx_ingress_hostname }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: grafana-service
                port:
                  number: {{ grafana_port }}

---
# Service Monitor for kube-proxy
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: kube-prometheus-stack-kube-proxy
  namespace: {{ log_stack_namespace }}
  labels:
    app.kubernetes.io/instance: {{ log_stack_release_name }}
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kube-prometheus-stack
spec:
  endpoints:
  - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
    port: metrics
    scheme: https
    tlsConfig:
      insecureSkipVerify: true
  jobLabel: k8s-app
  namespaceSelector:
    matchNames:
    - kube-system
  selector:
    matchLabels:
      k8s-app: kube-proxy

---
# Service for kube-proxy metrics
apiVersion: v1
kind: Service
metadata:
  name: kube-prometheus-stack-kube-proxy
  namespace: kube-system
  labels:
    k8s-app: kube-proxy
spec:
  ports:
  - name: metrics
    port: 10249
    protocol: TCP
  selector:
    k8s-app: kube-proxy