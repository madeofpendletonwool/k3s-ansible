---
- name: Create homepage namespace
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: homepage



- name: Create RBAC resources
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: homepage
        namespace: "{{ homepage_namespace }}"

- name: Create ClusterRole
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: homepage-reader
      rules:
        - apiGroups: [""]
          resources: ["pods", "services", "namespaces"]
          verbs: ["get", "list"]
        - apiGroups: ["metrics.k8s.io"]
          resources: ["pods"]
          verbs: ["get", "list"]
        - apiGroups: ["networking.k8s.io"]
          resources: ["ingresses"]
          verbs: ["get", "list"]
        - apiGroups: ["traefik.io"]
          resources: ["ingressroutes"]
          verbs: ["get", "list"]

- name: Create ClusterRoleBinding
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: homepage-reader
      subjects:
        - kind: ServiceAccount
          name: homepage
          namespace: "{{ homepage_namespace }}"
      roleRef:
        kind: ClusterRole
        name: homepage-reader
        apiGroup: rbac.authorization.k8s.io


# Update your ConfigMap tasks

- name: Create homepage settings ConfigMap
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: homepage-settings
        namespace: "{{ homepage_namespace }}"
      data:
        settings.yaml: "{{ lookup('template', 'settings.yaml.j2') }}"

- name: Create homepage bookmarks ConfigMap
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: homepage-bookmarks
        namespace: "{{ homepage_namespace }}"
      data:
        bookmarks.yaml: "{{ lookup('template', 'bookmarks.yaml.j2') }}"

- name: Create homepage services ConfigMap
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: homepage-services
        namespace: "{{ homepage_namespace }}"
      data:
        services.yaml: "{{ lookup('template', 'services.yaml.j2') }}"

- name: Create homepage bookmarks ConfigMap
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: homepage-widgets
        namespace: "{{ homepage_namespace }}"
      data:
        widgets.yaml: "{{ lookup('template', 'widgets.yaml.j2') }}"


- name: Create homepage kubernetes ConfigMap
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: homepage-kubernetes
        namespace: "{{ homepage_namespace }}"
      data:
        kubernetes.yaml: "{{ lookup('template', 'kubernetes.yaml.j2') }}"

# Update the deployment to use all ConfigMaps
# Update the deployment section in your playbook

- name: Deploy homepage
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: homepage
        namespace: "{{ homepage_namespace }}"
      spec:
        replicas: "{{ homepage_replicas }}"
        selector:
          matchLabels:
            app: homepage
        template:
          metadata:
            labels:
              app: homepage
          spec:
            serviceAccountName: homepage
            securityContext:
              fsGroup: 1000
            initContainers:
              - name: init-config
                image: busybox
                command: ['sh', '-c']
                args:
                  - |
                    mkdir -p /config-init
                    cd /config-init
                    cp /configmap/settings.yaml settings.yaml
                    cp /configmap/bookmarks.yaml bookmarks.yaml
                    cp /configmap/services.yaml services.yaml
                    cp /configmap/kubernetes.yaml kubernetes.yaml
                    cp /configmap/widgets.yaml widgets.yaml
                    mkdir -p logs
                    chown -R 1000:1000 /config-init
                volumeMounts:
                  - name: config-dir
                    mountPath: /config-init
                  - name: settings
                    mountPath: /configmap/settings.yaml
                    subPath: settings.yaml
                  - name: bookmarks
                    mountPath: /configmap/bookmarks.yaml
                    subPath: bookmarks.yaml
                  - name: services
                    mountPath: /configmap/services.yaml
                    subPath: services.yaml
                  - name: kubernetes
                    mountPath: /configmap/kubernetes.yaml
                    subPath: kubernetes.yaml
                  - name: widgets
                    mountPath: /configmap/widgets.yaml
                    subPath: widgets.yaml
            containers:
              - name: homepage
                image: "{{ homepage_image }}"
                ports:
                  - containerPort: 3000
                    name: http
                volumeMounts:
                  - name: config-dir
                    mountPath: /app/config
                env:
                  - name: PUID
                    value: "1000"
                  - name: PGID
                    value: "1000"
            volumes:
              - name: config-dir
                emptyDir: {}
              - name: settings
                configMap:
                  name: homepage-settings
              - name: bookmarks
                configMap:
                  name: homepage-bookmarks
              - name: services
                configMap:
                  name: homepage-services
              - name: kubernetes
                configMap:
                  name: homepage-kubernetes
              - name: widgets
                configMap:
                  name: homepage-widgets

- name: Create homepage service
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: homepage
        namespace: homepage
      spec:
        selector:
          app: homepage
        ports:
          - protocol: TCP
            port: 3000
            targetPort: 3000

- name: Create homepage ingress
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: homepage-ingress
        namespace: homepage
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: web,websecure
          traefik.ingress.kubernetes.io/router.tls: "true"
          traefik.ingress.kubernetes.io/router.tls.certresolver: letsencrypt
      spec:
        rules:
          - host: "home.{{ nginx_ingress_hostname }}"
            http:
              paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: homepage
                      port:
                        number: 3000
        tls:
          - secretName: homepage-tls-cert
            hosts:
              - "home.{{ nginx_ingress_hostname }}"
