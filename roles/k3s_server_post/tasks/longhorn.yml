---
- name: Create manifests directory for Longhorn configuration
  file:
    path: /tmp/k3s/longhorn
    state: directory
    owner: "{{ ansible_user_id }}"
    mode: 0755
  run_once: true

- name: Ensure longhorn-system namespace exists
  command: >
    k3s kubectl create namespace longhorn-system
  args:
    creates: /tmp/k3s/longhorn-system-created
  register: create_namespace_result_longhorn
  failed_when: create_namespace_result_longhorn.rc != 0 and "already exists" not in create_namespace_result_longhorn.stderr
  changed_when: create_namespace_result_longhorn.rc == 0
  run_once: true

- name: Deploy Longhorn using official YAML
  command: >
    k3s kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v1.6.2/deploy/longhorn.yaml
  register: longhorn_deploy_result
  changed_when: false
  run_once: true
  until: longhorn_deploy_result.rc == 0
  retries: 5

# # Check if the StorageClass exists
# - name: Check if the StorageClass exists
#   command: kubectl get storageclass donghorn-nfs --ignore-not-found
#   register: sc_exists
#   changed_when: false
#   run_once: true

# # Delete the existing StorageClass if it exists
# - name: Delete existing StorageClass if it exists
#   command: kubectl delete storageclass donghorn-nfs
#   when: sc_exists.stdout != ''
#   run_once: true

# - name: Create StorageClass for Longhorn with NFS
#   template:
#     src: "longhorn-storageclass-nfs.yaml.j2"
#     dest: "/tmp/k3s/longhorn-storageclass.yaml"
#     owner: "{{ ansible_user_id }}"
#     mode: 0755
#   when: use_external_nfs_storage
#   run_once: true

# - name: Apply the Longhorn StorageClass with NFS
#   command: >
#     k3s kubectl apply -f /tmp/k3s/longhorn-storageclass.yaml
#   when: use_external_nfs_storage
#   register: longhorn_storageclass_result
#   changed_when: false
#   run_once: true
#   until: longhorn_storageclass_result.rc == 0
#   retries: 5


- name: Wait for Longhorn components to be ready
  shell: >
    kubectl get pods --namespace longhorn-system --no-headers | grep -v "Running" || true
  register: longhorn_pods_not_running
  retries: 40
  delay: 10
  until: longhorn_pods_not_running.stdout == ""
  changed_when: false
  run_once: true

- name: Create Ingress resource for Longhorn UI
  template:
    src: "longhorn-setup-template.yaml.j2"
    dest: "/tmp/k3s/longhorn-ingress.yaml"
    owner: "{{ ansible_user_id }}"
    mode: 0755
  run_once: true

- name: Apply Longhorn Ingress resource
  command: >
    k3s kubectl apply -f /tmp/k3s/longhorn-ingress.yaml
  register: longhorn_ingress_apply_result
  changed_when: false
  run_once: true
  until: longhorn_ingress_apply_result.rc == 0
  retries: 5

- name: Add tolerations to Longhorn deployments
  shell: |
    k3s kubectl -n longhorn-system patch deployment {{ item }} --patch '
    spec:
      template:
        spec:
          tolerations:
            - key: "node.kubernetes.io/unreachable"
              operator: "Exists"
              effect: "NoExecute"
              tolerationSeconds: 15
            - key: "node.kubernetes.io/not-ready"
              operator: "Exists"
              effect: "NoExecute"
              tolerationSeconds: 15
    '
  loop:
    - csi-attacher
    - csi-provisioner
    - csi-resizer
    - csi-snapshotter
    - longhorn-driver-deployer
    - longhorn-ui
  run_once: true