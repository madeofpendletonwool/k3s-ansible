---
# roles/longhorn_deployment/tasks/main.yml

# First configure Talos nodes
- name: Generate Talos system extension schematic
  ansible.builtin.copy:
    dest: "/tmp/longhorn-schematic.yaml"
    content: |
      customization:
        systemExtensions:
          officialExtensions:
            - siderolabs/iscsi-tools
            - siderolabs/util-linux-tools
  delegate_to: localhost

- name: Get Talos image ID for system extensions
  ansible.builtin.uri:
    url: https://factory.talos.dev/schematics
    method: POST
    body: "{{ lookup('file', '/tmp/longhorn-schematic.yaml') }}"
    status_code: 200
  register: talos_image_id
  delegate_to: localhost

- name: Create Talos controlplane configuration
  ansible.builtin.template:
    src: controlplane.yaml.j2
    dest: /tmp/talos-config/controlplane.yaml
  vars:
    talos_image: "factory.talos.dev/installer/{{ talos_image_id.json.id }}:{{ talos_version }}"
  delegate_to: localhost

- name: Create Talos worker configuration
  ansible.builtin.template:
    src: worker.yaml.j2
    dest: /tmp/talos-config/worker.yaml
  vars:
    talos_image: "factory.talos.dev/installer/{{ talos_image_id.json.id }}:{{ talos_version }}"
  delegate_to: localhost

- name: Apply Talos configurations
  include_tasks: apply_talos_config.yml

# Then deploy Longhorn
- name: Create longhorn-system namespace with security labels
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: longhorn-system
        labels:
          pod-security.kubernetes.io/enforce: privileged
          pod-security.kubernetes.io/audit: privileged
          pod-security.kubernetes.io/warn: privileged
  delegate_to: localhost

- name: Wait for system extensions to be ready
  ansible.builtin.command:
    cmd: "talosctl -n {{ item }} get extensions -o yaml"
  register: extensions_status
  until: >
    'iscsi-tools' in extensions_status.stdout and
    'util-linux-tools' in extensions_status.stdout
  retries: 30
  delay: 10
  with_items: "{{ groups['k3s_cluster'] }}"
  delegate_to: localhost

- name: Deploy Longhorn
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    src: https://raw.githubusercontent.com/longhorn/longhorn/v1.6.2/deploy/longhorn.yaml
    state: present
  register: longhorn_deployment
  delegate_to: localhost

- name: Wait for Longhorn pods to be ready
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig }}"
    kind: Pod
    namespace: longhorn-system
    wait: yes
    wait_timeout: 600
    wait_condition:
      type: Ready
      status: true
  register: longhorn_pods
  delegate_to: localhost
  retries: 40
  delay: 10
  until: longhorn_pods.resources | length > 0 and (longhorn_pods.resources | map(attribute='status.phase') | list | unique == ['Running'])

- name: Deploy Longhorn UI Ingress and Service
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: longhorn-ui
        namespace: longhorn-system
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: web
      spec:
        rules:
        - host: "longhorn.{{ nginx_ingress_hostname }}"
          http:
            paths:
            - path: /
              pathType: Prefix
              backend:
                service:
                  name: longhorn-frontend
                  port:
                    number: 8050
  delegate_to: localhost

- name: Deploy Longhorn Frontend Service
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: longhorn-frontend
        namespace: longhorn-system
      spec:
        ports:
        - protocol: TCP
          port: 8050
          targetPort: 8000
        selector:
          app: longhorn-ui
  delegate_to: localhost

- name: Add tolerations to Longhorn deployments
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    namespace: longhorn-system
    kind: Deployment
    name: "{{ item }}"
    definition:
      spec:
        template:
          spec:
            tolerations:
            - key: "node.kubernetes.io/unreachable"
              operator: "Exists"
              effect: "NoExecute"
              tolerationSeconds: 15
            - key: "node.kubernetes.io/not-ready"
              operator: "Exists"
              effect: "NoExecute"
              tolerationSeconds: 15
    merge_type: strategic-merge
  loop:
    - csi-attacher
    - csi-provisioner
    - csi-resizer
    - csi-snapshotter
    - longhorn-driver-deployer
    - longhorn-ui
  delegate_to: localhost