---

# Token management on a single host
- name: Handle token creation on primary Proxmox host
  # when: inventory_hostname == groups['proxmox'][0]
  block:
    - name: Check if API token exists
      ansible.builtin.command: pveum user token list {{ proxmox_api_user }}@pve
      register: token_list
      changed_when: false
      check_mode: false

    - name: Debug token list
      ansible.builtin.debug:
        var: token_list.stdout_lines

    - name: Remove existing API token if it exists
      ansible.builtin.command: pveum user token remove {{ proxmox_api_user }}@pve {{ proxmox_api_token_id }}
      when: proxmox_api_token_id in token_list.stdout
      ignore_errors: true

    - name: Create new API token
      ansible.builtin.command: pveum user token add {{ proxmox_api_user }}@pve {{ proxmox_api_token_id }} --privsep 0
      register: token_result

    - name: Debug raw token result
      ansible.builtin.debug:
        var: token_result.stdout_lines
        
    - name: Save raw token output
      ansible.builtin.copy:
        content: "{{ token_result.stdout }}"
        dest: "/tmp/raw_token_output"
      delegate_to: localhost

    - name: Read raw token output
      ansible.builtin.command: cat /tmp/raw_token_output
      register: raw_token
      delegate_to: localhost

    - name: Extract token secret
      ansible.builtin.set_fact:
        proxmox_api_token_secret: "{{ token_result.stdout_lines[7] | regex_replace('^.*│\\s*value\\s*│\\s*([a-f0-9-]+)\\s*│.*$', '\\1') }}"

    - name: Debug token (remove in production)
      ansible.builtin.debug:
        msg: "Extracted token: {{ proxmox_api_token_secret }}"


    - name: Debug token
      ansible.builtin.debug:
        msg: "Token created for {{ inventory_hostname }}: {{ proxmox_api_token_secret }}"


    - name: Debug extracted token
      ansible.builtin.debug:
        msg: 
          - "Raw token output: {{ raw_token.stdout }}"
          - "Extracted token: {{ proxmox_api_token_secret }}"
      delegate_to: localhost

- name: Shutdown Talos control plane VMs
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_api_user }}@pve"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token_secret }}"
    api_host: "{{ inventory_hostname }}"
    name: "talos-control-plane-{{ inventory_hostname.split('.')[-1] }}"
    node: "{{ proxmox_node_name }}"
    state: stopped
    force: true
  when: inventory_hostname in groups['proxmox']
  ignore_errors: true

- name: Shutdown Talos worker VMs
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_api_user }}@pve"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token_secret }}"
    api_host: "{{ inventory_hostname }}"
    name: "talos-worker-{{ inventory_hostname.split('.')[-1] }}"
    node: "{{ proxmox_node_name }}"
    state: stopped
    force: true
  when: inventory_hostname in groups['proxmox']
  ignore_errors: true

- name: Wait for VMs to fully stop
  ansible.builtin.pause:
    seconds: 10

- name: Delete Talos control plane VMs
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_api_user }}@pve"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token_secret }}"
    api_host: "{{ inventory_hostname }}"
    name: "talos-control-plane-{{ inventory_hostname.split('.')[-1] }}"
    node: "{{ proxmox_node_name }}"
    state: absent
  when: inventory_hostname in groups['proxmox']
  ignore_errors: true

- name: Delete Talos worker VMs
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_api_user }}@pve"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token_secret }}"
    api_host: "{{ inventory_hostname }}"
    name: "talos-worker-{{ inventory_hostname.split('.')[-1] }}"
    node: "{{ proxmox_node_name }}"
    state: absent
  when: inventory_hostname in groups['proxmox']
  ignore_errors: true