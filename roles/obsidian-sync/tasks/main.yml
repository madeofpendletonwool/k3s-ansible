# roles/couchdb/tasks/main.yml
---
- name: Create couchdb namespace
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: couchdb

- name: Create PVC for CouchDB data
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: couchdb-data-pvc
        namespace: couchdb
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
        storageClassName: rook-ceph-block

- name: Create PVC for CouchDB config
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: couchdb-config-pvc
        namespace: couchdb
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
        storageClassName: rook-ceph-block

- name: Deploy CouchDB
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: couchdb
        namespace: couchdb
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: couchdb
        template:
          metadata:
            labels:
              app: couchdb
          spec:
            securityContext:
              fsGroup: 5984  # CouchDB uses this UID
            containers:
              - name: couchdb
                image: couchdb:latest
                ports:
                  - containerPort: 5984
                env:
                  - name: COUCHDB_USER
                    value: "{{ couchdb_username }}"
                  - name: COUCHDB_PASSWORD
                    value: "{{ couchdb_password }}"
                volumeMounts:
                  - name: data
                    mountPath: /opt/couchdb/data
                  - name: config
                    mountPath: /opt/couchdb/etc/local.d
            volumes:
              - name: data
                persistentVolumeClaim:
                  claimName: couchdb-data-pvc
              - name: config
                persistentVolumeClaim:
                  claimName: couchdb-config-pvc

- name: Create CouchDB Service
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: couchdb
        namespace: couchdb
      spec:
        selector:
          app: couchdb
        ports:
          - protocol: TCP
            port: 5984
            targetPort: 5984

- name: Create CouchDB Ingress
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: couchdb-ingress
        namespace: couchdb
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: web,websecure
          traefik.ingress.kubernetes.io/router.tls: "true"
          traefik.ingress.kubernetes.io/router.tls.certresolver: letsencrypt
          # CORS headers needed for Obsidian
          traefik.ingress.kubernetes.io/headers.accesscontrolallowmethods: "GET,PUT,POST,HEAD,DELETE"
          traefik.ingress.kubernetes.io/headers.accesscontrolallowheaders: "accept,authorization,content-type,origin,referer"
          traefik.ingress.kubernetes.io/headers.accesscontrolalloworiginlist: "app://obsidian.md,capacitor://localhost,http://localhost"
          traefik.ingress.kubernetes.io/headers.accesscontrolmaxage: "3600"
          traefik.ingress.kubernetes.io/headers.addvaryheader: "true"
          traefik.ingress.kubernetes.io/headers.accesscontrolallowcredentials: "true"
      spec:
        rules:
          - host: "couch.{{ nginx_ingress_hostname }}"
            http:
              paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: couchdb
                      port:
                        number: 5984
        tls:
          - secretName: couchdb-tls-cert
            hosts:
              - "couch.{{ nginx_ingress_hostname }}"


# Add to main.yml after the other tasks

# roles/couchdb/tasks/main.yml

# ... (previous tasks remain the same until initialization) ...

- name: Create init ConfigMap
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: couchdb-init
        namespace: couchdb
      data:
        init.sh: |
          #!/bin/sh
          set -e
          
          # Wait for CouchDB to be ready
          until curl -s http://couchdb.couchdb.svc.cluster.local:5984/_up; do
            echo "Waiting for CouchDB..."
            sleep 5
          done
          
          # Create system databases
          curl -X PUT http://couchdb.couchdb.svc.cluster.local:5984/_users \
            -u "${COUCHDB_USER}:${COUCHDB_PASSWORD}"
          
          curl -X PUT http://couchdb.couchdb.svc.cluster.local:5984/_replicator \
            -u "${COUCHDB_USER}:${COUCHDB_PASSWORD}"
          
          # Configure single node
          curl -X POST http://couchdb.couchdb.svc.cluster.local:5984/_cluster_setup \
            -H "Content-Type: application/json" \
            -u "${COUCHDB_USER}:${COUCHDB_PASSWORD}" \
            -d '{"action":"enable_single_node","username":"'"${COUCHDB_USER}"'","password":"'"${COUCHDB_PASSWORD}"'","bind_address":"0.0.0.0","port":5984,"singlenode":true}'
          
          # Configure CORS and other settings
          for config in \
            'httpd/enable_cors:true' \
            'cors/origins:app://obsidian.md,capacitor://localhost,http://localhost' \
            'cors/credentials:true' \
            'cors/methods:GET, PUT, POST, HEAD, DELETE' \
            'cors/headers:accept, authorization, content-type, origin, referer' \
            'chttpd/max_http_request_size:4294967296' \
            'couchdb/max_document_size:50000000'
          do
            KEY="${config%:*}"
            VALUE="${config#*:}"
            curl -X PUT "http://couchdb.couchdb.svc.cluster.local:5984/_node/nonode@nohost/_config/${KEY}" \
              -H "Content-Type: application/json" \
              -u "${COUCHDB_USER}:${COUCHDB_PASSWORD}" \
              -d "\"${VALUE}\""
          done

- name: Create initialization job
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: batch/v1
      kind: Job
      metadata:
        name: couchdb-init
        namespace: couchdb
      spec:
        ttlSecondsAfterFinished: 100
        template:
          spec:
            containers:
              - name: init
                image: curlimages/curl:latest
                command: ["/bin/sh", "/scripts/init.sh"]
                env:
                  - name: COUCHDB_USER
                    value: "{{ couchdb_username }}"
                  - name: COUCHDB_PASSWORD
                    value: "{{ couchdb_password }}"
                volumeMounts:
                  - name: init-script
                    mountPath: /scripts
            volumes:
              - name: init-script
                configMap:
                  name: couchdb-init
                  defaultMode: 0777
            restartPolicy: OnFailure

- name: Wait for initialization job to complete
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig }}"
    api_version: batch/v1
    kind: Job
    name: couchdb-init
    namespace: couchdb
  register: init_job
  until: init_job.resources[0].status.succeeded is defined and init_job.resources[0].status.succeeded == 1
  retries: 30
  delay: 10
