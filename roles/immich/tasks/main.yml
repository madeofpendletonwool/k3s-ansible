- name: Create a directory for temporary files if it does not exist
  ansible.builtin.file:
    path: /tmp/k3s
    state: directory
    mode: '0755'


- name: Ensure immich namespace exists
  kubernetes.core.k8s:
    kind: Namespace
    name: "{{ immich_namespace }}"
    state: present
    kubeconfig: /etc/rancher/k3s/k3s.yaml
  run_once: true

- name: Delete existing Immich PersistentVolume
  kubernetes.core.k8s:
    kind: PersistentVolume
    name: immich-library-pv
    state: absent
    kubeconfig: /etc/rancher/k3s/k3s.yaml
  run_once: true

- name: Delete existing Immich PersistentVolumeClaim
  kubernetes.core.k8s:
    kind: PersistentVolumeClaim
    name: immich-library-pvc
    namespace: "{{ immich_namespace }}"
    state: absent
    kubeconfig: /etc/rancher/k3s/k3s.yaml
  run_once: true

- name: Create NFS PersistentVolume for Immich
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: PersistentVolume
      metadata:
        name: immich-library-pv
      spec:
        capacity:
          storage: 1Ti
        volumeMode: Filesystem
        accessModes:
          - ReadWriteMany
        persistentVolumeReclaimPolicy: Retain
        nfs:
          server: "{{ nfs_server }}"
          path: "{{ nfs_immich_library_path }}"
    kubeconfig: /etc/rancher/k3s/k3s.yaml
  run_once: true

- name: Create PersistentVolumeClaim for Immich library
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: immich-library-pvc
        namespace: "{{ immich_namespace }}"
      spec:
        accessModes:
          - ReadWriteMany
        volumeMode: Filesystem
        resources:
          requests:
            storage: 1Ti
        volumeName: immich-library-pv
        storageClassName: ""  # Explicitly set to empty string
    kubeconfig: /etc/rancher/k3s/k3s.yaml
  run_once: true

# - name: Get PostgreSQL password
#   shell: |
#     k3s kubectl get secret --namespace postgres my-postgresql -o jsonpath="{.data.postgres-password}" | base64 --decode
#   register: postgres_password_result
#   changed_when: false
#   run_once: true

# - name: Set PostgreSQL password fact
#   set_fact:
#     postgres_password: "{{ postgres_password_result.stdout }}"
#   run_once: true


# - name: Decode PostgreSQL password
#   set_fact:
#     postgres_password: "{{ postgres_secret.resources[0].data['postgres-password'] | b64decode }}"
#   run_once: true


# - name: Set PostgreSQL connection details
#   set_fact:
#     postgres_host: "my-postgresql.postgres.svc.cluster.local"
#     postgres_user: "postgres"
#     immich_db_name: "immich_database"
#   run_once: true

- name: Create Immich values file
  template:
    src: immich-values.yaml.j2
    dest: "/tmp/k3s/immich-values.yaml"
    mode: '0600'
  run_once: true

- name: Display Immich values file contents
  ansible.builtin.command:
    cmd: cat /tmp/k3s/immich-values.yaml
  register: immich_values_content
  run_once: true

- name: Show Immich values file contents
  debug:
    var: immich_values_content.stdout_lines
  run_once: true

# - name: Check Helm release values
#   command: helm get values {{ immich_release_name }} -n {{ immich_namespace }}
#   register: helm_values
#   run_once: true

# - name: Display Helm values
#   debug:
#     var: helm_values.stdout_lines
#   run_once: true

- name: Deploy Immich using Helm
  kubernetes.core.helm:
    name: "{{ immich_release_name }}"
    chart_ref: immich/immich
    chart_version: "{{ immich_chart_version }}"
    release_namespace: "{{ immich_namespace }}"
    values_files:
      - "/tmp/k3s/immich-values.yaml"
    kubeconfig: /etc/rancher/k3s/k3s.yaml
  run_once: true

- name: Check PV status
  kubernetes.core.k8s_info:
    kind: PersistentVolume
    name: immich-library-pv
    kubeconfig: /etc/rancher/k3s/k3s.yaml
  register: pv_status
  run_once: true

- name: Check PVC status
  kubernetes.core.k8s_info:
    kind: PersistentVolumeClaim
    name: immich-library-pvc
    namespace: "{{ immich_namespace }}"
    kubeconfig: /etc/rancher/k3s/k3s.yaml
  register: pvc_status
  run_once: true

- name: Display PV and PVC status
  debug:
    msg: 
      - "PV Status: {{ pv_status }}"
      - "PVC Status: {{ pvc_status }}"
  run_once: true